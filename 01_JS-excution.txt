Javascript:
    JS has default behaviour is Synchronous(We have to made forcefully asynchronous)
    JS is single threaded.
    It excute after step by step after old one method is completed then next method start.

There are main 2 types of execution in JS.
1. Global execution context
2. Function execution context
3. Eval execution context (Optional).

js execution code execution :
1st phase = Memory creation phase (Creation phase)
2nd phase = Execution phase

eg:
    let val1 = 10
    let val2 = 20
    function addNum(num1,num2){
        let total = num1 + num2;
        return total
    }
    let result1 = addNum(val1,val2)
    let result2 = addNum(30,40)

code run flow:
1. Global execution:  --> this 
2. Memory creation phase: created declaration only and values are undefined.
    val1-> undefined, 
    val2 -> undefined, 
    addNum -> defination,
    result1 -> undefined,
    result2 -> undefined
3. Execution phase:
    val1 <- 10
    val2 <- 20
    addNum() -->  Function creates new variable environment + execution thread.
                  When function created it will create memory phase and execution phase.
            1. Memory phase:
                val1 -> undefined
                val2 -> undefined
                total -> undefined
            2. Execution phase:
                num1 -> 10,
                num2 -> 20
                total -> 30     ---> value returns to the global context.